{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true, /* Сохраняем файлы .tsbuildinfo, чтобы разрешить инкрементную компиляцию проектов. */
    // "composite": true, /* Включить ограничения, позволяющие использовать проект TypeScript со ссылками на проект. */
    // "tsBuildInfoFile": "./.tsbuildinfo", /* Указываем путь к файлу инкрементной компиляции .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true, /* Отключить предпочтение исходных файлов вместо файлов объявлений при ссылке на составные проекты. */
    // "disableSolutionSearching": true, /* Отключить проект от многопроектной проверки ссылок при редактировании. */
    // "disableReferencedProjectLoad": true, /* Уменьшить количество проектов, автоматически загружаемых TypeScript. */

    /* Language and Environment */
    "target": "es6", /* Установить версию языка JavaScript для создаваемого JavaScript и включить объявления совместимых библиотек. */
    // "lib": [], /* Укажите набор связанных файлов объявлений библиотек, описывающих целевую среду выполнения. */
    // "jsx": "сохранить", /* Укажите, какой код JSX генерируется. */
    "experimentalDecorators": true, /* Включить экспериментальную поддержку черновых декораторов этапа 2 TC39. */
    "emitDecoratorMetadata": true, /* Выдавать метаданные типа дизайна для оформленных объявлений в исходных файлах. */
    // "jsxFactory": "", /* Укажите фабричную функцию JSX, используемую при нацеливании на генерацию React JSX, например. «React.createElement» или «ч». */
    // "jsxFragmentFactory": "", /* Укажите ссылку на фрагмент JSX, используемую для фрагментов при нацеливании на генерацию React JSX, например. «React.Fragment» или «Фрагмент». */
    // "jsxImportSource": "", /* Укажите спецификатор модуля, используемый для импорта функций фабрики JSX при использовании 'jsx: react-jsx*'. */
    // "reactNamespace": "", /* Укажите объект, вызываемый для 'createElement'. Это применимо только при нацеливании на «реагирование» на выброс JSX. */
    // "noLib": true, /* Отключить, включая любые библиотечные файлы, включая lib.d.ts по умолчанию. */
    // "useDefineForClassFields": true, /* Генерировать поля класса, соответствующие стандарту ECMAScript. */
    // "moduleDetection": "auto", /* Управление тем, какой метод используется для обнаружения JS-файлов модульного формата. */

    /* Modules */
    "module": "commonjs", /* Укажите, какой код модуля генерируется. */
    // "rootDir": "./", /* Укажите корневую папку в ваших исходных файлах. */
    "moduleResolution": "node", /* Укажите, как TypeScript ищет файл из данного спецификатора модуля. */
    // "baseUrl": "./", /* Укажите базовый каталог для разрешения не относительных имен модулей. */
    // "paths": {}, /* Укажите набор записей, которые повторно сопоставляют импорт с дополнительными местами поиска. */
    // "rootDirs": [], /* Разрешить обработку нескольких папок как одной при разрешении модулей. */
    // "typeRoots": [], /* Укажите несколько папок, которые действуют как './node_modules/@types'. */
    // "types": [], /* Укажите имена пакетов типов, которые будут включены без ссылок в исходном файле. */
    // "allowUmdGlobalAccess": true, /* Разрешить доступ к глобалам UMD из модулей. */
    // "moduleSuffixes": [], /* Список суффиксов имен файлов для поиска при разрешении модуля. */
    // "resolveJsonModule": true, /* Включить импорт файлов .json. */
    // "noResolve": true, /* Запретить import'ам, 'require's или '<reference>'ам увеличивать количество файлов, которые TypeScript должен добавить в проект. */

    /* JavaScript Support */
    // "allowJs": true, /* Разрешить файлы JavaScript быть частью вашей программы. Используйте опцию «checkJS», чтобы получить ошибки из этих файлов. */
    // "checkJs": true, /* Включить отчеты об ошибках в файлах JavaScript с проверкой типов. */
    // "maxNodeModuleJsDepth": 1, /* Укажите максимальную глубину папки, используемую для проверки файлов JavaScript из 'node_modules'. Применимо только с «allowJs». */

    /* Emit */
    // "declaration": true, /* Генерировать файлы .d.ts из файлов TypeScript и JavaScript в вашем проекте. */
    // "declarationMap": true, /* Создать исходные карты для файлов d.ts. */
    // "emitDeclarationOnly": true, /* Выводить только файлы d.ts, а не файлы JavaScript. */
    // "sourceMap": true, /* Создать файлы исходной карты для созданных файлов JavaScript. */
    // "outFile": "./", /* Укажите файл, который объединяет все выходные данные в один файл JavaScript. Если «объявление» верно, также обозначает файл, который объединяет все выходные данные .d.ts. */
    "outDir": "./dist", /* Укажите выходную папку для всех выпущенных файлов. */
    "removeComments": true, /* Отключить вывод комментариев. */
    // "noEmit": true, /* Отключить передачу файлов из компиляции. */
    // "importHelpers": true, /* Разрешить импортировать вспомогательные функции из tslib один раз для каждого проекта, а не включать их для каждого файла. */
    // "importsNotUsedAsValues": "remove", /* Укажите поведение отправки/проверки для импорта, который используется только для типов. */
    // "downlevelIteration": true, /* Выдать более совместимый, но многословный и менее производительный JavaScript для итерации. */
    // "sourceRoot": "", /* Укажите корневой путь, по которому отладчики смогут найти справочный исходный код. */
    // "mapRoot": "", /* Укажите расположение, в котором отладчик должен размещать файлы карт вместо созданных местоположений. */
    // "inlineSourceMap": true, /* Включить файлы исходной карты в созданный JavaScript. */
    // "inlineSources": true, /* Включить исходный код в исходные карты внутри сгенерированного JavaScript. */
    // "emitBOM": true, /* Генерировать метку порядка байтов UTF-8 (BOM) в начале выходных файлов. */
    // "newLine": "crlf", /* Установить символ новой строки для выдачи файлов. */
    // "stripInternal": true, /* Отключить генерирующие объявления, в комментариях JSDoc которых есть '@internal'. */
    // "noEmitHelpers": true, /* Отключить создание пользовательских вспомогательных функций, таких как '__extends', в скомпилированном выводе. */
    // "noEmitOnError": true, /* Отключить создание файлов, если сообщается об ошибках проверки типов. */
    // "preserveConstEnums": true, /* Отключить стирание объявлений 'const enum' в сгенерированном коде. */
    // "declarationDir": "./", /* Укажите выходной каталог для сгенерированных файлов объявлений. */
    // "preserveValueImports": true, /* Сохранять неиспользуемые импортированные значения в выходных данных JavaScript, которые в противном случае были бы удалены. */

    /* Interop Constraints */
    // "isolatedModules": true, /* Убедитесь, что каждый файл может быть безопасно перенесен, не полагаясь на другие импорты. */
    // "allowSyntheticDefaultImports": true, /* Разрешить 'импорт x из y', когда модуль не имеет экспорта по умолчанию. */
    "esModuleInterop": true, /* Создать дополнительный JavaScript, чтобы облегчить поддержку импорта модулей CommonJS. Это включает «allowSyntheticDefaultImports» для совместимости типов. */
    // "preserveSymlinks": true, /* Отключить преобразование символических ссылок в их реальный путь. Это соответствует тому же флагу в node. */
    "forceConsistentCasingInFileNames": true, /* Убедитесь, что регистр правильный при импорте. */

    /* Type Checking */
    "strict": true, /* Включить все параметры строгой проверки типов. */
    // "noImplicitAny": true, /* Включить сообщения об ошибках для выражений и объявлений с подразумеваемым типом "любой". */
    // "strictNullChecks": true, /* При проверке типов учитывайте 'null' и 'undefined'. */
    // "strictFunctionTypes": true, /* При назначении функций убедитесь, что параметры и возвращаемые значения совместимы с подтипами. */
    // "strictBindCallApply": true, /* Проверяем, что аргументы методов "bind", "call" и "apply" соответствуют исходной функции. */
    "strictPropertyInitialization": true, /* Проверка свойств класса, которые объявлены, но не заданы в конструкторе. */
    // "noImplicitThis": true, /* Включить отчет об ошибках, когда 'this' имеет тип 'any'. */
    // "useUnknownInCatchVariables": true, /* Переменные предложения catch по умолчанию как "неизвестные" вместо "любые". */
    // "alwaysStrict": true, /* Убедитесь, что 'use strict' всегда генерируется. */
    // "noUnusedLocals": true, /* Включить отчет об ошибках, когда локальные переменные не читаются. */
    // "noUnusedParameters": true, /* Выдать ошибку, если параметр функции не прочитан. */
    // "exactOptionalPropertyTypes": true, /* Интерпретировать необязательные типы свойств так, как они написаны, а не добавлять 'undefined'. */
    // "noImplicitReturns": true, /* Включить отчеты об ошибках для кодовых путей, которые не возвращаются явным образом в функции. */
    // "noFallthroughCasesInSwitch": true, /* Включить отчеты об ошибках для аварийных случаев в операторах switch. */
    // "noUncheckedIndexedAccess": true, /* Добавить 'undefined' к типу при доступе с использованием индекса. */
    // "noImplicitOverride": true, /* Убедитесь, что переопределяющие члены в производных классах помечены модификатором переопределения. */
    // "noPropertyAccessFromIndexSignature": true, /* Принуждает использовать индексированные методы доступа для ключей, объявленных с использованием индексированного типа. */
    // "allowUnusedLabels": true, /* Отключить сообщения об ошибках для неиспользуемых меток. */
    // "allowUnreachableCode": true, /* Отключить сообщения об ошибках для недостижимого кода. */

    /* Completeness */
    // "skipDefaultLibCheck": true, /* Пропустить файлы проверки типов .d.ts, входящие в состав TypeScript. */
    "skipLibCheck": true /* Пропустить проверку всех файлов .d.ts. */
  }
}
